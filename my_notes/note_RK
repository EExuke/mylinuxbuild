########################################################################################
# RK3588 buildroot notes
########################################################################################

# U-Boot 编译
	cd RK3588J_sdk/rk3588-buildroot-2021.11-sdk-v1.1/u-boot
	make rk3588_defconfig
	./make.sh rk3588
	./make.sh CROSS_COMPILE=aarch64-none-linux-gnu- rk3588

# Kernel 编译
	if [[ $1 == "clean" ]]; then
		echo -e "${F_GR}run distclean${C_ED}"
		make CROSS_COMPILE=aarch64-none-linux-gnu- ARCH=arm64 distclean
	elif [[ $1 == "menu" ]]; then
		make -j4 CROSS_COMPILE=aarch64-none-linux-gnu- ARCH=arm64 menuconfig
		echo -e "${F_GR}run [make -j4 CROSS_COMPILE=aarch64-none-linux-gnu- ARCH=arm64 savedefconfig] to make defconfig${C_ED}"
		make -j4 CROSS_COMPILE=aarch64-none-linux-gnu- ARCH=arm64 savedefconfig
		echo -e "${F_GR}run [mv defconfig arch/arm64/configs/rockchip_linux_defconfig] to recover configs${C_ED}"
		mv defconfig arch/arm64/configs/rockchip_linux_defconfig
	elif [[ $1 == "def" ]]; then
		echo -e "${F_GR}load kernel configs${C_ED}"
		make -j4 CROSS_COMPILE=aarch64-none-linux-gnu- ARCH=arm64 rockchip_linux_defconfig rk3588_linux.config
	else
		echo -e "${F_GR}build kernel image${C_ED}"
		make -j32 CROSS_COMPILE=aarch64-none-linux-gnu- ARCH=arm64 tl3588f-evm.img
		echo -e "${F_GR}make fit image${C_ED}"
		./mk-fitimage.sh
		echo -e "${F_GR}build dtbs${C_ED}"
	fi

# Buildroot 编译
	cd RK3588J_sdk/rk3588-buildroot-2021.11-sdk-v1.1/
	./build.sh ./device/rockchip/rk3588/tl3588_evm_defconfig
	cd buildroot/
	./envsetup.sh rockchip_rk3588
	make menuconfig
	make savedefconfig
	cd .. && ./build.sh buildroot
	ll output/firmware/rootfs.img

# FW 镜像构建
	基于mkimage_v1.0.tar.gz, 拆解、合并系统固件 update.img （包含uboot.img, boot.img和rootfs.img）
	update.img包含:
		MiniLoaderAll.bin    SPL镜像                                   一般无需更新
		uboot.img            U-Boot镜像                                -
		boot.img             Kernel 镜像                               -
		rootfs.img           根文件系统镜像                            -
		oem.img              OEM 数据镜像                              一般无需更新
		userdata.img         用户数据镜像                              一般无需更新
		misc.img             中间状态暂存镜像，主要用于系统恢复模式    一般无需更新
		recovery.img         系统恢复模式的根文件系统镜像              一般无需更新
		parameter.txt        系统相关参数                              一般无需更新
	1. 解压mkimage_v1.0.tar.gz后, cd mkimage/
	2. 拆解update.img：
		./mkimage.sh unpack image/update.img
		生成文件于 output/ 目录下
	3. 构建update.img:
		更新替换output/Image/目录下的对应img文件
		./mkimage.sh pack
		生成新 update.img 于 output/update/ 下

# 修改rootfs.img
	sudo mount -o loop rootfs.img ./tmp_rootfs
	修改文件
	sudo umount -l ./tmp_rootfs

# 扩容rootfs.img (扩容用于向rootfs中添加更多文件)
	dd if=/dev/zero of=expanded_rootfs.img bs=1G count=4
	mkfs.ext4 expanded_rootfs.img
	sudo mount -o loop expanded_rootfs.img ./expanded_rootfs
	拷贝原rootfs.img中所有文件到 ./expanded_rootfs/ 中
	sync
	sudo umount -l ./expanded_rootfs
# rootfs容量resize到 mmcblk0p6 总大小
	板子上执行: resize2fs /dev/mmcblk0p6

# uboot镜像直接替换
	dd if=uboot.img of=/dev/mmcblk0p1
	sync && reboot
# kernel镜像直接替换
	dd if=boot.img of=/dev/mmcblk0p3
	sync && reboot


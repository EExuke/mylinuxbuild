########################################################################################################
# C56 Reworks update:
# 1.tftp方式升级reworks：
# 	配置ip; 配置update_tool为tftpboot方式; 执行 run udpre 开始升级; reset重启
# 2.ftp方式升级reworks:
# 	update_iso "ftp://c5601:1@10.0.0.133/reworks.elf",0x802
# 3.ftp方式升级fpga：
# 	进入reworks,使用update_iso "?" 升级fpga软件;
#########################################################################################################
#   scrt 烧文件系统 																					#
#	tftp 0x81000000 squashfs.vc;																		#
#	sf probe 0;sf erase 0x0280000 0x0d00000; sf write 0x81000000 0x0280000 0x0d00000; bootm b4100000	#
#########################################################################################################
	tftp 0x81000000 squashfs.vc; 				/* Download */
	sf probe 0;sf erase 0x0280000 0x0d00000; 	/* 定位 擦除 */
	sf write 0x81000000 0x0280000 0x0d00000; 	/* Write */
	bootm b4100000 								/* Start boot */
#########################################################################################################

#Linux env build from: https://www.github.com/EExuke/mylinuxbuild
#-----------------------------------------------------------------------------------------------------------------#
# 													   Note      												  #
#
#  一 Coding and Debug 常用快捷键：
# 	F2 ：右侧显示当前文件中函数
# 	F3 ：下侧动态显示函数来源
# 	F4 ：左侧显示当前目录中其他文件
# 	F5 : 同时显示上述三框
# 	
# 	需要先在项目目录下生成tags ，（用：ctags -R *   或者  Sync -b  ）(Java:jtags, Python:ptags)
# 	Ctrl+] : 下跳到当前函数的来源
# 	Ctrl+} : 上跳到当前函数的被调用处
# 	Ctrl+t ： 回跳
# 	[[    ：光标移至函数开头
#
# 	Ctrl+\+c /（或, s c）: 查看该函数的被调用处
# 	Ctrl+\+s /（或, s s）: 全局搜索当前函数
#
# 	：vsp /dir/file  ： 左右分窗同时现实两个文件
# 	，+t : 插入文件开头
# 	，+1 2 3 4 5 6 7 8 ： 加Debug打印信息
# 	, +c+s 或 ,+c+"空格" ：多行快捷注释
# 	, +f 或 :MRU ：查看最近查看过的文件
#
# 	Ctrl+c n : 复制当前文件名
# 	Ctrl+c a : 复制当前路径
#
# 	q{register} : 宏录制，q停止
# 	@{register} : 执行录制的宏,可在前面加执行次数
# 	q{REGISTER} : "大写"，可追加补充宏录制
#
# 	!: 不退出当前文件，执行shell命令
# 	%：代表当前文件
#
# 	sp [file]: (上下)水平分窗
# 	<res|resize> 20: 调整水平分窗的高度为20
# 	vs [file]: (左右)垂直分窗
# 	vertical [res|resize] 20: 调整垂直分窗的宽度20
#
#  二 终端快捷键：
# 	sw ： 目录跳转
# 	e ： 编辑快捷指令
# 	cmd ：本Note 
# 	v ： 编辑vimrc文件
# 	meld file1 file2 : 比较两个合并文件的异同(need sudo apt-get install meld )
# 	比较两个二进制文件，可以使用vimdiff。
# 		vimdiff应该还是比较好用的，类似windows 平台的windiff
# 		vim -bd base.ko base2.ko
# 		打开后就可以在两个窗口里面显示两个文件
# 		ctrl + W +L  把输入焦点切换到右边的窗口，激活右边的窗口后输入的命令就是针对右窗口了
# 		:%!xxd -g 1  切换成十六进制的一个字节的模式
# 		ctrl + W +H  把输入焦点切换到左边的窗口 
# 		:%!xxd -g 1 
# 		] + c  查找上一个不同点
# 		[ + c  查找下一个不同点
#
# 	dir ： 切换环境目录模式
# (type '别名' ：查看命令含义解释)
#
#
#  三 需要的插件：
# 	vim-gui-common ： 剪切板共享
# 	xclip: 复制内容到剪切板工具(c)
# 	ctags： 函数跳转工具
# 	cscope： C代码查看辅助插件(项目目录下执行： cscope -Rbkq )
# 	gxmessage: 弹窗工具
#
#  四 git提交代码
# 	git st .
# 	git diff .
# 	git diff ... >/filename
# 	diff的清除与导入：
# 		git checout .
# 		git apply filename
# 	查看文件修改者和修改信息：
# 		git annotate /home/xuke/PATH...
# 		git show <commit ID> 或 git sh <commit ID>
# 	子模块的分支状态信息文件：
# 		.git/modules/<modules_name>/HEAD
# 	首次克隆仓库及其模块，使用：
# 		git clone --recursive 仓库地址
# 	拉取子模块：
# 		git submodule update --init --rbpostecursive
# 	更新子模块：
# 		git submodule update --recursive --Reviewemote
# 	使用git log --author=“author” 可以查找某一个作者所有的提交
# 	tig: git的可视化工具
# 		sudo apt-get install tig
# 		<使用说明可查>
# 	打tag:
# 		git tag v1.0            #本地tag
# 		git push origin v1.0    #推送tag到仓库
#
# 五 程序安装包打包
# 	sh自解压脚本方式:
# 		1.编辑自解压脚本ins.sh:
# 			#!/bin/bash
# 			src_path="./src"
# 			preline=10
# 			line=`wc -l $0 | awk '{print $1}'`
# 			line=$[${line} - ${preline}]
# 			tail -n $line $0 | tar zx -C ${src_path}
# 			cd ${src_path}/
# 			#do something for copy or install...
# 			exit 0
# 			#
# 			#补全preline+1行
# 		2.制作压缩包:
# 			tar cvzf XXX.tar.gz XXX/
# 			zip -r XXX.zip XXX/
# 		3.拼接文件:
# 			cat ins.sh XXX.tar.gz > XXX_install.sh
# 			chmod +x XXX_install.sh
# 	deb包方式: (已编写为快捷脚本命令: my_deb )
# 		1.创建程序同名目录, 并在其中分别创建DEBIAN、安装路径如usr/local/bin/等目录;
# 		2.在DEBIAN/ 下创建control文件并写入如下内容：
# 			package:<程序名>
# 			version:1.0
# 			architecture:arm64
# 			maintainer:xuke
# 			description:deb package demo test
# 		3.过程控制脚本:
# 			包安装前执行脚本: preinst
# 			包安装后执行脚本: postinst
# 			包卸载前执行脚本: prerm
# 			包卸载后执行脚本: postrm
# 		4.打包: dpkg -b <包目录名> <安装包名.deb>
# 		5.安装: dpkg -i <安装包名.deb>
# 		6.卸载: dpkg -r <程序名>    //是control中的 package:<程序名>
# 		7.查看包信息: dpkg -I | -info xxx.deb
# 		8.查看包内文件: dpkg -c xxx.deb
# 		9.解压/安装到指定目录: dpkg -x xxx.deb <dir>    #<dir>就是要安装的路径
# 	shell脚本压缩加密工具:
# 		1. gzexe
# 		2. shc
#
# 六 常用工具
# 	串口工具 minicom
# 		运行： sudo minicom -D /dev/ttyUSB0 -b 115200 
#
# 七 好用的终端
# 	terminator:
# 		支持窗口分屏，透明/自定义背景，指定双击分隔符等
#
# 八 实用命令
# 	打开文件位置:nautilus filename
# 	网络客户端：nc <ip> <port> 
# 	快速杀死进程：pkill <psName> 或 killall <psName>
# 	进程查看器：htop
# 	文件编码类型转换（解决linux下显示win编码文件乱码问题）
# 		iconv　 -f 　GB2312　 -t　 UTF-8　 test1.m　 -o 　test1.m
# 		------------原本编码-------新编码---原文件名-------新生成文件名
# 	命令行翻译：
# 		git clone https://gitee.com/qiyou/mzfanyi.git
# 		cd /usr/bin/
# 		sudo ln -s /home/xuke/bin/mzfanyi.sh fy
# 	弹窗工具:gxmessage
# 		sudo apt install gxmessage
# 		gxmessage -timeout 5 -center -fg blue -font "Sans 12" -geometry 400x150 -buttons "OK,Wait 10 mins" -default "Wait" -title "eye protect" " 请保护眼睛 请做眼保健操!"
#
# 	tcpdump抓包：
# 			参考：https://blog.csdn.net/august5291/article/details/121015216
# 		tcpdump tcp -i eth1 -t -s 0 -c 100 and dst port ! 22 and src net 192.168.1.0/24 -w ./target.cap
# 			(1)tcp: ip icmp arp rarp 和 tcp、udp、icmp这些选项等都要放到第一个参数的位置，用来过滤数据报的类型
# 			(2)-i eth1 : 只抓经过接口eth1的包
# 			(3)-t : 不显示时间戳
# 			(4)-s 0 : 抓取数据包时默认抓取长度为68字节。加上-S 0 后可以抓到完整的数据包
# 			(5)-c 100 : 只抓取100个数据包
# 			(6)dst port ! 22 : 不抓取目标端口是22的数据包
# 			(7)src net 192.168.1.0/24 : 数据包的源网络地址为192.168.1.0/24
# 			(8)-w ./target.cap : 保存成cap文件，方便用ethereal(即wireshark)分析; 注意：直接看tcpdump输出包可能不全，-w抓取更全面
# 			(9)-r 从文件读取显示
# 			(10)-X 显示包内容负载
# 			(11)show detail tcpdump -XX -vvv -nn
# 			(12)-e: show 二层头 
# 		只捕获TCP SYN包:
# 			tcpdump -i <interface> "tcp[tcpflags] & (tcp-syn) != 0"
# 		只捕获TCP FIN包：
# 			tcpdump -i <interface> "tcp[tcpflags] & (tcp-fin) != 0"
# 		只捕获TCP SYN或ACK包：
# 			tcpdump -i <interface> "tcp[tcpflags] & (tcp-syn|tcp-ack) != 0"
# 			...
# 			...
# 	qrencode:二维码生成工具（最大支持输入6200个数字, 2900个字符）
# 		 qrencode -t UTF8 -o - "this is a test string by EExuke"
#
# 	figlet: 打印横幅字体; 可使用-f+格式制定横幅格式，使用showfigfonts命令查看支持的格式；-k不粘连；
#
# 	bc计算器:
# 		设置小数点后位数: scale=4
# 		进制转换:
# 			ibase=16
# 			obase=10
#
# 	cloc代码统计工具:
# 		cloc <dir>
#
# 	ls反选:
# 		ls | grep -v "[a-z]+"
#
# 	查看动态依赖库:
# 		ldd <app>;  readelf -d <app>;  objdump -x <app>
# 	查看库的平台架构:
# 		readelf -h <lib>
# 	指定依赖库路径:
# 		LD_LIBRARY_PATH
#
# 	二进制或hex格式数据查看工具
# 		xdd -h
# 		hexdump -h
# 	二进制或hex格式数据查看工具
# 		dhex -h
# 		hexeidt -h
# 	图片编辑器:
# 		pinta
# 	WSL打开文件夹：
# 		wslview .
# 	按列合并文件:
# 		paste -d , 1_data.csv 2_data.csv > all_data.csv
#

########################################################################################################
#
#########################################################################################################
#   scrt 烧文件系统 																					#
#	tftp 0x81000000 squashfs.vc;																		#
#	sf probe 0;sf erase 0x0280000 0x0d00000; sf write 0x81000000 0x0280000 0x0d00000; bootm b4100000	#
#########################################################################################################
#   emmc Start Index Information																		#
#																										#
#   0x00000000-0x00080000 (512K)  Boot																	#
#   0x00080000-0x000C0000 (256K)  Env																	#
#   0x000C0000-0x00100000 (256K)  BoardInfo																#
#   0x00100000-0x00280000 (1.5M)  Os-1																	#
#   0x00280000-0x00F80000 (13M)   Rootfs-1																#
#   0x00F80000-0x01100000 (1.5M)  Os-2																	#
#   0x01100000-0x01E00000 (13M)   Rootfs-2																#
#   0x01E00000-0x02000000 (2M)    Jffs2																	#
#																										#
#########################################################################################################
	tftp 0x81000000 squashfs.vc; 				/* Download */
	sf probe 0;sf erase 0x0280000 0x0d00000; 	/* 定位 擦除 */
	sf write 0x81000000 0x0280000 0x0d00000; 	/* Write */
	bootm b4100000 								/* Start boot */
#################################################----  cmd  ----###################################################
#   进入uboot:
#   (VG710) # 【看到VG710调试串口的U-Boot打印后， 按q+回车组合键进入uboot命令行， 注意确认uboot的版本】
#   在uboot下升级uboot
#   (VG710) # tftpboot VG9-uboot-2012.07.r235.bin    【下载uboot】
#
#   done
#	Bytes transferred = 496083 (791d3 hex)
#	(VG710) # mmc write 84000000 1a22 3c9   【烧写uboot】
#	MMC write: dev # 0, block # 6690, count 969 ... 969 blocks write: OK
#	(VG710) # reset  【烧写完毕，重启系统】
#
#	在uboot下用tftpboot下载固件root， 并使用bootm启动root
#   【root就是编译过程中自动生成的打包好的可启动固件， 包含：内核、ramdisk及设备树等镜像， 在/tftpboot/目录下可以找到】
#   (VG710) # tftpboot root    【下载root】
#   (VG710) # bootm    【bootm启动root】
#
#   tftpboot root; bootm
#########################################################################################################

#Linux env build from: https://www.github.com/EExuke/mylinuxbuild
#-----------------------------------------------------------------------------------------------------------------#
# 													   Note      												  #
#
#  一 Coding and Debug 常用快捷键：
# 	F2 ：右侧显示当前文件中函数
# 	F3 ：下侧动态显示函数来源
# 	F4 ：左侧显示当前目录中其他文件
# 	F5 : 同时显示上述三框
# 	
# 	需要先在项目目录下生成tags ，（用：ctags -R *   或者  Sync -b  ）(Java:jtags, Python:ptags)
# 	Ctrl+] : 下跳到当前函数的来源
# 	Ctrl+} : 上跳到当前函数的被调用处
# 	Ctrl+t ： 回跳
# 	[[    ：光标移至函数开头
#
# 	Ctrl+\+c /（或, s c）: 查看该函数的被调用处
# 	Ctrl+\+s /（或, s s）: 全局搜索当前函数
# 
#
# 	：vsp /dir/file  ： 左右分窗同时现实两个文件
# 	，+t : 插入文件开头
# 	，+1 2 3 4 5 6 7 8 ： 加Debug打印信息
# 	, +c+s 或 ,+c+"空格" ：多行快捷注释
# 	, +f 或 :MRU ：查看最近查看过的文件
#
# 	Ctrl+c n : 复制当前文件名
# 	Ctrl+c a : 复制当前路径
#
# 	q{register} : 宏录制，q停止
# 	@{register} : 执行录制的宏,可在前面加执行次数
# 	q{REGISTER} : "大写"，可追加补充宏录制
#
#  二 终端快捷键：
# 	sw ： 目录跳转
# 	e ： 编辑快捷指令
# 	cmd ：本Note 
# 	v ： 编辑vimrc文件
# 	meld file1 file2 : 比较两个合并文件的异同(need sudo apt-get install meld )
# 	比较两个二进制文件，可以使用vimdiff。
# 		vimdiff应该还是比较好用的，类似windows 平台的windiff
# 		vim -bd base.ko base2.ko
# 		打开后就可以在两个窗口里面显示两个文件
# 		ctrl + W +L  把输入焦点切换到右边的窗口，激活右边的窗口后输入的命令就是针对右窗口了
# 		:%!xxd -g 1  切换成十六进制的一个字节的模式
# 		ctrl + W +H  把输入焦点切换到左边的窗口 
# 		:%!xxd -g 1 
# 		] + c  查找上一个不同点
# 		[ + c  查找下一个不同点
#
# 	dir ： 切换环境目录模式
# (type '别名' ：查看命令含义解释)
#
#
#  三 需要的插件：
# 	vim-gui-common ： 剪切板共享
# 	xclip: 复制内容到剪切板工具(c)
# 	ctags： 函数跳转工具
# 	cscope： C代码查看辅助插件(项目目录下执行： cscope -Rbkq )
# 	gxmessage: 弹窗工具
#
#
#  四 git提交代码&postreview
# 	git st .
# 	git diff .
# 	git diff ... >/filename
# 	rbpost ...  (or Review web : 172.22.102.205 to add diff)
#
# 	after "Ship it!":
# 		1. git pull  先更新
# 		2. git commit .  -> 填写模板 ->wq
# 		3. git show .  (查看确认)
# 		4. git push    (提交)
# 	diff的清除与导入：
# 		git checout .
# 		git apply filename
# 	查看文件修改者和修改信息：
# 		git annotate /home/xuke/PATH...
# 		git show <commit ID> 或 git sh <commit ID>
# 	子模块的分支状态信息文件：
# 		.git/modules/<modules_name>/HEAD
# 	首次克隆仓库及其模块，使用：
# 		git clone --recursive 仓库地址
# 	拉取子模块：
# 		git submodule update --init --rbpostecursive
# 	更新子模块：
# 		git submodule update --recursive --Reviewemote
# 	使用git log --author=“author” 可以查找某一个作者所有的提交
#
# tig: git的可视化工具
# 		sudo apt-get install tig
# 		<使用说明可查>
#
#
# 五 编译
# 	项目目录下 make run ： 运行x86
#
# 六 Linux下烧录
# 	安装串口工具 minicom
# 	运行： sudo minicom -D /dev/ttyUSB0 -b 115200 
# 	重启tftp： sudo /etc/init.d/xinetd start或者restart
# 
#
# 七 好用的终端
# 	terminator:
# 		支持窗口分屏，透明/自定义背景，指定双击分隔符等
#
# 八 实用命令
# 	打开文件位置:nautilus filename
# 	网络客户端：nc <ip> <port> 
# 	快速杀死进程：pkill <psName> 或 killall <psName>
# 	进程查看器：htop
# 	文件编码类型转换（解决linux下显示win编码文件乱码问题）
# 		iconv　 -f 　GB2312　 -t　 UTF-8　 test1.m　 -o 　test1.m
# 		------------原本编码-------新编码---原文件名-------新生成文件名
# 	命令行翻译：
# 		git clone https://gitee.com/qiyou/mzfanyi.git
# 		cd /usr/bin/
# 		sudo ln -s /home/xuke/bin/mzfanyi.sh fy
# 	弹窗工具:gxmessage
# 		sudo apt install gxmessage
# 		gxmessage -timeout 5 -center -fg blue -font "Sans 12" -geometry 400x150 -buttons "OK,Wait 10 mins" -default "Wait" -title "eye protect" " 请保护眼睛 请做眼保健操!"
#
# 	tcpdump抓包：
# 		tcpdump tcp -i eth1 -t -s 0 -c 100 and dst port ! 22 and src net 192.168.1.0/24 -w ./target.cap
# 			(1)tcp: ip icmp arp rarp 和 tcp、udp、icmp这些选项等都要放到第一个参数的位置，用来过滤数据报的类型
# 			(2)-i eth1 : 只抓经过接口eth1的包
# 			(3)-t : 不显示时间戳
# 			(4)-s 0 : 抓取数据包时默认抓取长度为68字节。加上-S 0 后可以抓到完整的数据包
# 			(5)-c 100 : 只抓取100个数据包
# 			(6)dst port ! 22 : 不抓取目标端口是22的数据包
# 			(7)src net 192.168.1.0/24 : 数据包的源网络地址为192.168.1.0/24
# 			(8)-w ./target.cap : 保存成cap文件，方便用ethereal(即wireshark)分析
# 			(9)-r 从文件读取显示
# 			(10)-X 显示包内容负载
# 			(11)show detail tcpdump -XX -vvv -nn
# 			(12)-e: show ethernet data
# 			...
# 	qrencode:二维码生成工具
# 		

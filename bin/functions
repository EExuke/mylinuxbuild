#!/bin/bash
#
# This shell libarary gathers any useful tools to improve labor efficiency!
#
# Maintainer: zhendongcao <zhendongcao@nettech-global.com>
# Participator: xuke <EExuke@qq.com>
#    Created: Modification on the template of Rain, 2017-3
# LastChange: 2018-01-19

#-----------------------------------------------------------
#                SHELL TOOLS
#-----------------------------------------------------------

# Color Variables {{{1
#-----------------------------------------------------------
#                COLOUR VARIABLES
#-----------------------------------------------------------
UNDERLINE="\033[4m"
FG_BLACK="\033[30m"
FG_RED="\033[31m"
FG_GREEN="\033[32m"
FG_YELLOW="\033[33m"
FG_BLUE="\033[34m"
FG_PURPLE="\033[35m"
FG_DARKGREEN="\033[36m"
FG_WHITE="\033[37m"
BG_BLACK="\033[40m"
BG_RED="\033[41m"
BG_GREEN="\033[42m"
BG_YELLOW="\033[43m"
BG_BLUE="\033[44m"
BG_PURPLE="\033[45m"
BG_DARKGREEN="\033[46m"
BG_WHITE="\033[47m"
F6_END="\033[0m"

# Sync Command {{{1
# Sync: synchronize cscope tags and ctags
function Sync()
{
    if [ "$1" = "b" ] || [ "$1" = "-b" ]; then
        find -L . -name "*.h" -o -name "*.c" -o -name "*.cpp" -o -name "*.lua" -o -name "*.def" > cscope.files
        cscope -bkq -i cscope.files
        ctags-exuberant -R *
    elif [ "$1" = "c" ] || [ "$1" = "-c" ]; then
        rm -f cscope.files cscope.in.out cscope.out cscope.po.out tags
    else
        echo -e $FG_YELLOW
        echo -e "Usage: Sync [OPTION]"
        echo -e $FG_GREEN
        echo -e "\t-b [path]      build the cross-reference"
        echo -e "\t-c [path]      clear the cross-reference"
        echo -e $F6_END
    fi
}

# Quickly Change Directory(sw) {{{1
# static: export project root path
function dir_export()
{
    case $# in
        1 )
            # export project root directory
            export PROJ_ROOT_PATH=$1
            # export project customer directory
            eval $(grep "export CUSTOMER_FOLDER" $PROJ_ROOT_PATH/build.env 2> /dev/null)
            ;;
        2 )
            if [ -d "$1" ]; then
                export PROJ_ROOT_PATH=$1
                eval $(grep "export CUSTOMER_FOLDER" $PROJ_ROOT_PATH/build.env 2> /dev/null)

                # create a link 'cpe-build' to current project in place.
                ln -sfn $PROJ_ROOT_PATH $(dirname $PROJ_ROOT_PATH)/cpe-build
            fi
            ;;
        * )
            ;;
    esac
}

# static: decide project path
function dir_decide()
{
    local GENERIC_PROJECT=cpe-build

    case $1 in
        "" )
            ;;
        1 )
            dir_export /home/xuke/workspace/$GENERIC_PROJECT
            ;;
        2 )
            dir_export /home/xuke/workroom/$GENERIC_PROJECT
            ;;
        3 )
            dir_export /home/xuke/$GENERIC_PROJECT
            ;;
        * )
            dir_export "$(dirname $PROJ_ROOT_PATH)/$1" "$(dirname $PROJ_ROOT_PATH)/$GENERIC_PROJECT"
            ;;
    esac
}

# print or set project root path
function dir()
{
    if [ $# = 0 ]; then

        echo "Please choose main directory:"
        echo "  1: /home/xuke/workspace/cpe-build"
        echo "  2: /home/xuke/workroom/cpe-build"
        echo "Anykey other key to give up!!!"
        echo ""

        read -n 1 -p "which one: " op
        if [ "$op" == "" ]; then
            echo -ne "proj path:"
            echo -ne "$FG_DARKGREEN"
            echo -ne "$PROJ_ROOT_PATH"
            echo -e  "$F6_END"
        else
            echo -e "\nyou choosed the option-${FG_PURPLE}$op${F6_END}!\n";
            dir_decide "$op"
        fi

    else
        dir_decide "$@"
    fi
}

##################################################
# $1 - new dir
# $2 - old dir
##################################################
function try_cd()
{
    local _1_=$PROJ_ROOT_PATH/$1
    local _2_=$PROJ_ROOT_PATH/$2

    if [ -d "$_1_" ]; then
        echo -e $FG_YELLOW$(dirname $PROJ_ROOT_PATH)/$F6_END$BG_YELLOW$(basename $PROJ_ROOT_PATH)$F6_END$FG_YELLOW/$1$F6_END;cd $_1_
    elif [ -d "$_2_" ]; then
        echo -e $FG_YELLOW$(dirname $PROJ_ROOT_PATH)/$F6_END$BG_YELLOW$(basename $PROJ_ROOT_PATH)$F6_END$FG_YELLOW/$2$F6_END;cd $_2_
    else
        echo -ne "$FG_RED"
        echo -ne "No Such Dir!"
        echo -e  "$F6_END"
    fi
}

function sw()
{
    if [ "$PROJ_ROOT_PATH" = "" ];then
        echo "Please give the main directory first!"
        return 0
    fi

    case $1 in
        - )
            cd -
            ;;
        "" )
            try_cd
            ;;
        a|app )
            try_cd AD56/MC-AD5602_FT_APP/mainApp
            ;;
        b|boot )
            try_cd boot/uboot_bcm_switch/uboot boot/uboot_rtk_switch/u-boot-2011.12
            ;;
        k|kk )
            try_cd os/os_bcm_switch/kernel/linux-3.6.5 os/os_rtk_uClinux_switch/uClinux/linux-2.6.x
            ;;
        ag|agent )
            try_cd inhand/agent
            ;;
        cli )
            try_cd inhand/cli
            ;;
        w|work )
            cd ~/workspace
            ;;
        n|np )
            try_cd core/code/customer/${CUSTOMER_FOLDER}/npapi
            ;;
        f|fu )
            try_cd core/code/future
            ;;
        i|in|inhand )
            try_cd inhand/
            ;;
        im|imt )
            try_cd images/test
            ;;
        msr )
            try_cd core/code/future/ISS/common/msr
            ;;
        l|lr )
            cd /home/xuke/learnspace
            ;;
        cl|clr )
            try_cd core/code/customer/${CUSTOMER_FOLDER}/LR
            ;;
        m|mib )
            try_cd core/code/future/mibs
            ;;
        cm|cmib )
            try_cd core/code/customer/${CUSTOMER_FOLDER}/mibs/mibs
            ;;
        o|opensource)
            try_cd core/code/opensource
            ;;
        q|qemu)
            cd ~/learnspace/my_qemu_project
            ;;
        qrun )
            cd ~/learnspace/my_qemu_project/qemu_run_env
            ;;
        s|storage )
            cd ~/workspace/Misc_libs/storage_app_stack/
            ;;
        r|rootfs )
            cd ~/workspace/Misc_libs/Rootfs/storage_rootfs_stack/
            ;;
        re )
            cd /home/xuke/release
            ;;
        e|erps )
            try_cd core/code/future/erps
            ;;
        t|tf|tftp|tftpboot )
            cd /home/xuke/tftpboot/
            ;;
        cscope )
            try_cd core/code
            ;;
        en|env|envirenment )
            cd /home/xuke/mylinuxbuild/
            ;;
        te|temp)
            cd /home/xuke/Templates/
            ;;
        235|IR235 )
            try_cd inhand/InCross/arch/InRouter235
            ;;
        600|IR600 )
            try_cd inhand/InCross/arch/InRouter600
            ;;
        700|IR700 )
            try_cd inhand/InCross/arch/InRouter700
            ;;
        800|IR800 )
            try_cd inhand/InCross/arch/InRouter800
            ;;
        c70|C70 )
            cd ~/workspace/C70/software/RC-C70_ZYNQ_APP
            ;;
        bx2|BX2 )
            cd ~/workspace/BX2/trunk/RC-BX2_FT_APP/
            ;;
        * )
            cd "$1"
            ;;
    esac

    return $?
}

# My Shell Commands {{{1
function p()
{
    if [ $# -eq "0" ]; then
        ping www.sohu.com
    else
        ping $*
    fi
}

function ff()
{
	if [[ $# == 0 ]]; then
		echo -e "${FG_GREEN}Usage: ff [-f] <addr|path>${F6_END}"
	elif [[ $1 == "-f" ]]; then
		if [[ ${2:0:1} == "." || ${2:1:1} == "/" ]]; then
			cur_path=`pwd`
			firefox "file://///wsl$/Ubuntu-18.04/${cur_path}/${2:2}"
		else
			firefox "file://///wsl$/Ubuntu-18.04/$2"
		fi
	else
		firefox $*
	fi
}

function f()
{
    #注意路径正确性，不能在符号链接的假路径使用
    if [ $# = 1 ]; then
        find `pwd` -name "$1"
    fi

    if [ $# = 2 ]; then
        find "$1" -name "$2"
    fi
}

function mygrep()
{
    # g/gi A      : grep A -Iirns *
    if [ $# = 2 ]; then
        grep $1 -- "$2" *
        echo -e ${FG_RED}Command:${FG_YELLOW} grep $1 -- \""$2"\" *${F6_END}
    fi

    # Note: ${2/\//} will cut '/' in $2, ex. $2: ./a >> .a

    # g/gi A b/   : grep A -Iirns b/ (b/ must has the character '/')
    # g/gi A c    : grep A --include="c" -Iirns ./
    if [ $# = 3 ]; then
        if [ "$3" == "${3/\//}" ]; then
            grep --include="$3" "$2" $1 *
            echo -e "${FG_RED}Command:${FG_YELLOW} grep --include="$3" \""$2"\" $1 *${F6_END}"
        else
            grep $1 -- "$2" "$3"
            echo -e "${FG_RED}Command:${FG_YELLOW} grep $1 -- \""$2"\" "$3"${F6_END}"
        fi
    fi

    # only support "g/gi A b/ c" || "g/gi A c b/" now
    if [ $# = 4 ]; then
        if [ "$4" != "${4/\//}" ] && [ "$3" == "${3/\//}" ]; then
            # input "g value *.c <path>"
            # grep --include="*.c" "value" -Irns <path>
            grep --include="$3" "$2" $1 "$4"
            echo -e "${FG_RED}Command:${FG_YELLOW} grep --include="$3" \""$2"\" $1 "$4"${F6_END}"
        elif [ "$3" != "${3/\//}" ] && [ "$4" == "${4/\//}" ]; then
            # input "g value <path> *.c"
            # grep --include="*.c" "value" -Irns <path>
            grep --include="$4" "$2" $1 "$3"
            echo -e "${FG_RED}Command:${FG_YELLOW} grep --include="$4" \""$2"\" $1 "$3"${F6_END}"
        fi
    fi
}

function g()
{
    mygrep -Irns "$@"
}

function gi()
{
    mygrep -Iirns "$@"
}

function clone()
{
    if [ -n "$1" ]; then
        git clone cameo_git:bs_super $1
    else
        git clone cameo_git:bs_super $1
    fi
}


function mycat()
{
	local displayline=15

	if [ -n "$1" ]; then
		# mycat ISS/common/tool/cmoid/mibparser/MIBCOMPILER/temp.mib:7736:
		local filename=${1%%:*}         # ISS/common/tool/cmoid/mibparser/MIBCOMPILER/temp.mib
		local tmpstr=${1#*:}            # 7736:
		local line=${tmpstr%%:*}        # 7736

		# let the display line in the middle
		local offset_line=$[$[displayline - 1]/2]
		local startline=$[line - offset_line]
		local stopline=$[2 * offset_line]

		cat -n $filename | tail -n +$startline | head -n $offset_line
		echo -ne ${FG_YELLOW}
		cat -n $filename 2>/dev/null | tail -n +$line | head -n 1
		echo -ne ${F6_END}
		cat -n $filename 2>/dev/null | tail -n +$[line + 1] | head -n $offset_line
	else
		echo @ Lack of file parameters!
	fi
}

# dump a.out/ISS.exe $(MEM_DIR)
# dump a.out/ISS.exe $(FROM_DIR) $(TO_DIR)
function mydump()
{
	local mips_dir=/opt/toolchain/mips-linux-uclibc/bin

	if [ "$1" != "" ]; then
		local binary=$(echo $1 | grep "ISS.exe" | awk '{print $1}')
	fi

	if [ "$binary" != "" ]; then
		# mydump $(binary) $(MEM_DIR)
		# mydump $(binary) $(FROM_DIR) $(TO_DIR)
		if [ $# -eq "2" ]; then # addr2line
			local MEM_DIR=$2
		elif [ $# -eq "3" ]; then # objdump
			local FROM_DIR=$2 TO_DIR=$3
		fi
	else
		# mydump $(MEM_DIR)
		# mydump $(FROM_DIR) $(TO_DIR)
		# The binary compiled file name is omitted
		binary=${PROJ_ROOT_PATH}/core/code/future/LR/ISS.exe
		if [ $# -eq "1" ]; then #addr2line
			local MEM_DIR=$1
		elif [ $# -eq "2" ]; then # objdump
			local FROM_DIR=$1 TO_DIR=$2
		fi
	fi

	if [ "$MEM_DIR" != "" ]; then
		if [[ "$MEM_DIR" =~ ^0x.* ]]; then
			mem_dir=${MEM_DIR}
		else
			mem_dir=0x${MEM_DIR}
		fi
		${mips_dir}/mips-linux-addr2line -e $binary $mem_dir
	elif [ "$FROM_DIR" != "" ] && [ "$TO_DIR" != "" ]; then
		if [[ "$FROM_DIR" =~ ^0x.* ]] && [[ "$TO_DIR" =~ ^0x.* ]]; then
			local str_dir=$FROM_DIR
			local stp_dir=$TO_DIR
		elif [[ "$FROM_DIR" =~ ^0x.* ]]; then
			local str_dir=$FROM_DIR
			local stp_dir=0x$TO_DIR
		elif [[ "$TO_DIR" =~ ^0x.* ]]; then
			local str_dir=0x$FROM_DIR
			local stp_dir=$TO_DIR
		else
			local str_dir=0x$FROM_DIR
			local stp_dir=0x$TO_DIR
		fi
		${mips_dir}/mips-linux-objdump -d $binary --start-address=${str_dir} --stop-address=${stp_dir}
	else
		echo  @ mydump \(mips-linux-addr2line\) \$\(ISS.exe\) \$\(MEM_DIR\)
		echo  @ mydump \(\ mips-linux-objdump \) \$\(ISS.exe\) \$\(FROM_DIR\) \$\(TO_DIR\)
	fi
}

# my vim named "vv"
function vv()
{
	local colon=$(echo $1 | grep ":" | awk '{print $1}')

	if [ "$colon" != "" ]; then
		local tmpstr=${colon#*:}
		local editfile="${colon%%:*} +${tmpstr%%:*}"
	else
		local editfile=$@
	fi

	vim $editfile
}

# My Notes {{{1
function cmd()
{
    vim /home/xuke/mylinuxbuild/my_notes/note_cmd
}

function n()
{
	#"n Id" : create or open note book
	if [[ $1 == "" ]]; then
		tree ~/mylinuxbuild/my_notes
		echo -e "${FG_GREEN}Usage: n <Index> [headline endline]: create or open note_XXX book${F6_END}"
	elif [[ $2 == "" ]]; then
		vim /home/xuke/mylinuxbuild/my_notes/note_$1
	elif [[ $3 == "" ]]; then
		sed -n "$2, $2p" /home/xuke/mylinuxbuild/my_notes/note_$1
	elif [[ $4 == "" ]]; then
		sed -n "$2, $3p" /home/xuke/mylinuxbuild/my_notes/note_$1
	fi
}
#}}}
# My cp functions {{{1
# for copy FW into tftp dir auto on 2017/8/4
function tfcp()
{
	echo -e "$FG_GREEN------------------------------------------------------------$F6_END"
	echo -e "${FG_GREEN}Update mainApp to ~/tftpboot/:${F6_END}"
	cp ./Obj/mainApp ~/tftpboot/
	${STRIP} ~/tftpboot/mainApp
	ls -alh ~/tftpboot/mainApp
	date | cowsay
	echo -e "$FG_GREEN------------------------------------------------------------$F6_END"
}

# copy to system copyBoard
function c()
{
	#1.copy to windos, need install xsel
	#2.copy to linux, need install xclip
	if [ ! $1 ]; then
		#copyBoardopy notec to clipboard
		#sed -n 5p ~/mylinuxbuild/my_notes/note_cmd | xsel
		#echo "str...................." | xsel
		cat /home/xuke/mylinuxbuild/my_notes/note_c | xclip -selection clipboard
	elif [ ! $2 ]; then
		#copy note_$1 to clipboard
		cat /home/xuke/mylinuxbuild/my_notes/note_$1 | xclip -selection clipboard
	elif [ ! $3 ]; then
		#copy $2 line of note_$1 to clipboard
		sed -n $2p /home/xuke/mylinuxbuild/my_notes/note_$1 | xclip -selection clipboard
	else
		#copy $2-$3 line of note_$1 to clipboard
		sed -n $2,$3p /home/xuke/mylinuxbuild/my_notes/note_$1 | xclip -selection clipboard
	fi
}

# for copy $1 into tftpboot auto
function cpin()
{
	echo -e "$FG_GREEN------------------------------------------------------------$F6_END"
	if [[ $1 != "" ]]; then
		echo -e "${FG_GREEN}Update $@ to ~/tftpboot/:${F6_END}"
		cp $@ ~/tftpboot/
		for i in $@
		do
			filename=`echo ${i} | awk -F / '{print $NF}'`
			ls -alh ~/tftpboot/${filename}
		done
		date | cowsay
	else
		ls ~/tftpboot/
		echo "Usage: cpin <filename>" | cowsay
	fi
	echo -e "$FG_GREEN------------------------------------------------------------$F6_END"
}

# for copy $1 from tftpboot auto
function cpout()
{
	echo -e "$FG_GREEN------------------------------------------------------------$F6_END"
	if [[ $1 != "" ]]; then
		echo -e "${FG_GREEN}Copy $@ from ~/tftpboot/:${F6_END}"
		for i in $@
		do
			cp ~/tftpboot/${i} ./
			ls -alh ./${i}
		done
		date | cowsay
	else
		ls ~/tftpboot/
		echo "Usage: cpout <filename>" | cowsay
	fi
	echo -e "$FG_GREEN------------------------------------------------------------$F6_END"
}
#}}}
#CROSS COMPILE {{{
function mk()
{
	if [[ "$1" == "x86" ]]; then
		unset CC
		unset CXX
		unset CPP
		unset AS
		unset LD
		unset GDB
		unset STRIP
		unset RANLIB
		unset OBJCOPY
		unset OBJDUMP
		unset AR
		unset NM
		unset M4
		unset TARGET_PREFIX
		unset CFLAGS
		unset CXXFLAGS
		unset LDFLAGS
		unset CPPFLAGS
		unset ARCH
		unset PLATFORM
		unset CROSS_COMPILE
	elif [[ "$1" == "ft" ]]; then
		#FT2000
		source /opt/env_aarch64-linux-gnu.sh
	elif [[ "$1" == "zynq" ]]; then
		source /opt/env_zynq7xxx_armhf.sh
	elif [[ "$1" == "pi" ]]; then
		#树莓派
		source /opt/env_raspbian_arm_gnueabihf.sh
	fi

	make clean
	make
	echo "Finished" | figlet
}
#}}}
# My Quickly Commands {{{
# search function
function se()
{
	my_browser="firefox"
	if [[ "$1" == "cweb" ]]; then
		$my_browser "http://c.biancheng.net"
		echo -e "[$1] open tag: C语言中文网 \n"
	elif [[ "$1" == "gitee" ]]; then
		$my_browser "https://gitee.com/EExuke/dashboard/projects"
		echo -e "[$1] open tag: Gitee \n"
	elif [[ "$1" == "rnb" ]]; then
		$my_browser "https://c.runoob.com"
		echo -e "[$1] open tag: Runoob \n"
	elif [[ "$1" == "mind" ]]; then
		$my_browser "http://www.mindline.cn/webapp"
		echo -e "[$1] open tag: MindLine \n"
	elif [[ "$1" == "design" ]]; then
		$my_browser "http://huatu.98youxi.com/home/newfile"
		echo -e "[$1] open tag: 迅捷画图 \n"
	elif [[ "$1" == "" ]]; then
		echo -e "${F_DG}se${F6_E} ${F_GR}<Input contents for searching>${F6_E}"
		echo -e "   ${F_GR}cweb   (open C语言中文网)${F6_E}"
		echo -e "   ${F_GR}gitee  (open Gitee仓库)${F6_E}"
		echo -e "   ${F_GR}rnb    (open Runoob)${F6_E}"
		echo -e "   ${F_GR}mind   (open MindLine)${F6_E}"
		echo -e "   ${F_GR}design (open 迅捷画图)${F6_E}"
	else
		$my_browser "https://www.baidu.com/s?wd=$1"
		echo -e "searching: $1 \n"
	fi
}

function rfc ()
{
	if [ "$1" != "" ]; then
		if [ "$1" != "-n" ]; then
			firefox http://www.rfcreader.com/\#search/$1
		elif [ "$2" != "" ]; then
			firefox http://www.rfcreader.com/\#rfc$2
		fi
	else
		echo -e "${F_DG}rfc${F6_E} ${F_GR}<RFC Title>${F6_E} \n    [-n] ${F_GR}<RFC number>${F6_E} "
	fi
}

# telnet ip
function tl()
{
	c c 5
	telnet 192.168.$1
}
function tln()
{
	c c 5
	telnet $1
}

# build test IR8
function bd8()
{
	sw s
	rm -rf /home/xuke/workspace/OldFw_back/*.bin
	mv ../images/test/*.bin ../../OldFw_back/
	./build.sh test ER8
	gxmessage -center -fg green -font "Sans 18" -geometry 400x150 -buttons "OK" -title "bd8" "FW编译完成啦!"
}

# move file to trash
function del()
{
	if [[ $# == 0 ]]; then
		echo -e "${FG_GREEN}Usage: del <filenames> ${F6_END}"
	else
		Trash_dir=/home/xuke/.my_trash
		for i in $@
		do
			echo -e "${FG_GREEN}remove ${i} \tto\t${Trash_dir}/${F6_END}"
			mv ${i} ${Trash_dir}
		done
	fi
}

# bashrc
function b()
{
    vi ~/.bashrc
}

# vimrc
function v()
{
    vi ~/.vimrc
}

# edit itself
function e()
{
    vi /home/xuke/bin/functions
}

function r()
{
    vi ~/bin/release_me.sh
}

# edit dbg.h
function d()
{
    vi ~/bin/dbg.h
}

function po()
{
    vim ~/bin/postfile
}

# backup or builder my vim envirenment.
function back()
{
    time=$(date +%Y-%m-%d)
    folder=vim-builder-${time}
    file_dir=~/${folder}

    if [ "$1" = "b" ] || [ "$1" = "-b" ] || [ "$1" = "-bc" ] || [ "$1" = "bc" ]; then
        if [ ! -d "${file_dir}" ]; then
            mkdir ${file_dir};
        fi
        cp ~/.bashrc \
            ~/.vimrc \
            ~/.vimrc_other \
            ~/.gitconfig \
            ~/.gitmessage \
            ~/.profile \
            ~/rbpost \
            ${file_dir}/ ;
        cp -R ~/bin/ \
            ~/.vim/ \
            ~/.ssh/ \
            ~/tar/ \
            ${file_dir}/
        echo -e $FG_GREEN
        echo -e " Backuped my vim envirenment to ${FG_YELLOW}${file_dir}/"
        echo -e $F6_END
    elif [ "$1" = "c" ] || [ "$1" = "-c" ] || [ "$1" = "cl" ] || [ "$1" = "-cl" ]; then
        # case of <TIME> not null.
        if [ -n "$2" ]; then
            clean_time=$2;
            clean_file=~/vim-builder-${clean_time};
        else
            clean_file=${file_dir};
        fi
        rm -rf ${clean_file};
        echo -e $FG_GREEN
        echo -e " Cleaned my backed envirenment from ${FG_YELLOW}${clean_file}/"
        echo -e $F6_END
    else
        echo -e $FG_YELLOW
        echo -e "Backup My Envirenment: back [OPTION]"
        echo -e $FG_GREEN
        echo -e "\t-b/-bc             backup my envirenment into ${folder} directory."
        echo -e "\t-c/-cl <TIME>      remove backup dir and file created <TIME>."
        echo -e $FG_RED
        echo -e "\t${FG_RED}Note: Default value of <TIME> is today,format like 2018-01-19"
        echo -e $F6_END
    fi
}

# 打开Terminal的JSON配置文件
function setj()
{
	vim ~/quick_link/term_cfg.json
}

# 字符串转二维码
function qcode()
{
	qrencode -t UTF8 $1
}
#}}}
# keil5 编译{{{1
function mkuv()
{
	project_name=`ls ./*.uvprojx`
	log_file="uv4_build.log"
	obj_dir=./Obj

	if [[ -z ${project_name} ]]; then
		echo -e "${FG_RED}Not Found uvprojx project!${F6_END}"
		return
	fi

	if [[ $1 == "-b" ]]; then
		echo -e "${FG_GREEN}build uvprojx project ${project_name} by keil5:${F6_END}"
		uv4 -j0 ${project_name} $1 -o ${log_file}
		cat ${log_file} && rm ${log_file}    # 打印编译信息
		hex_target=`ls ${obj_dir}/*.hex`
		if [[ -n ${hex_target} ]]; then
			echo -e "${FG_GREEN} copy ${hex_target} to tftpboot/ ...${F6_END}"
			cp ${hex_target} ~/tftpboot/
		fi
	elif [[ $1 == "-c" ]]; then
		echo -e "${FG_GREEN}clean uvprojx project by keil5:${F6_END}"
		uv4 -j0 ${project_name} $1 -o ${log_file}
		rm ${obj_dir}/*.crf ${obj_dir}/*.sct ${obj_dir}/*.htm
		cat ${log_file} && rm ${log_file}    # 打印编译信息
	else
		echo -e "${FG_GREEN}open uvprojx project by ${project_name} keil5...${F6_END}"
		uv4 ${project_name}
	fi
}
# test_b {{{1
function test_b()
{
	if [[ $1 == "" ]]; then
		echo -e "${FG_GREEN}Usage: $0 <prj_name> [dir]${F6_END}"
		return
	fi

	if [[ $# < 2 ]]; then
		sw te;
	else
		sw $2;
	fi

	mkdir $1; cd $1;

	mkdir src inc obj;
	touch obj/.gitinit
	vim -O inc/"$1".h src/"$1".c
	vim Makefile;
}

# CC {{{1
function cc()
{
   local j=0
   local k=0
   local count=3
   local BEEN_PROCESSED=1
   local NOT_PROCESSED=0
   local processed_flag=$NOT_PROCESSED

   # get current processing dir
   local current_dir=`pwd`

   # get modified files into array_modified_paths
   cd $PROJ_ROOT_PATH/core/code/future &>/dev/null; cotmp &>/dev/null;

   for i in $(git status -s | grep ' M ' | cut -d ' ' -f3)
   do
       array_modified_paths[j]=$i;
       j=`expr $j + 1`;
   done

   # get modles name under future/, and if under them has a Makefile, to make -C clean it.
   for line in ${array_modified_paths[@]}
   do
       root_node=$(echo $line | cut -d '/' -f1)

       if [ "$root_node" = "vlangarp" ]; then
           root_node="vlangarp/vlan"
       # ISS/common
       elif [ "$root_node" = "ISS" ]; then
           # cmccmc  cmes  cmlog  cmrpc  csmme  customer  msr  system  tool  web
           root_node=$(echo $line | cut -d '/' -f3)

           if [ "$root_node" = "customer" ]; then
               root_node="ISS/common/customer/eoid"
           # ISS/common/tool
           elif [ "$root_node" = "tool" ]; then
               # cmoid  configzip  lua  mibcompiler  msrscan
               root_node=$(echo $line | cut -d '/' -f4)
           fi
       elif [ "$CUSTOMER_FOLDER" = "trendnet" ]; then
           # do not compile this directory in TRENDnet
           if [ "$root_node" = "seciwf" ] || [ "$root_node" = "security" ]; then
               processed_flag=$BEEN_PROCESSED
           fi
       fi

       # echo -e ${FG_RED}"DEBUG: root_node is ($root_node)"${F6_END}

       if [ -f $PROJ_ROOT_PATH/core/code/future/$root_node/Makefile ]; then

           # process make must under PROJ_ROOT_PATH
           if [ `pwd` != $PROJ_ROOT_PATH ]; then
               cd $PROJ_ROOT_PATH &>/dev/null;
           fi

           # get already clean paths, cause multiple files may be modified in the same directory,
           # but modules should be cleaned only once.
           for processed_node in ${array_root_nodes[@]}
           do
               if [ "$processed_node" == "$root_node" ]; then

                   processed_flag=$BEEN_PROCESSED
                   break;
               fi
           done

           if [ $processed_flag != $BEEN_PROCESSED ]; then
               echo -e ${FG_DARKGREEN}------------------------------------------------------------
               echo -e "cleaning "`pwd`"/core/code/future/$root_node"
               echo -e ------------------------------------------------------------${F6_END}
               make -C core/code/future/$root_node clean

               if [ $? != 0 ]; then
                   cd $current_dir &>/dev/null;
                   return 1
               fi
           #else
               #echo ------------------------------------------------------------
               #echo "processed "`pwd`"/core/code/future/$root_node"
               #echo ------------------------------------------------------------
           fi

           array_root_nodes[k]=$root_node
           k=`expr $k + 1`;
           processed_flag=$NOT_PROCESSED

       fi
   done

   #for ((i=$count;i>=0;i--))
   #do
       #tput sc; tput civis
       #echo -ne $(tput setf $((i+1)))"["$(date +'%Y-%m-%d %H:%M:%S')"]"$(tput sgr0)
       #echo -ne $(tput setf $((count-i)))" compile watting ..."$(tput sgr0)
       #echo -ne $(tput setf $((count-i));tput bold)" ${i} seconds"$(tput sgr0)
       #sleep 1
       #tput rc
   #done

   #tput el; tput cnorm; tput setf 7

   # process make must under PROJ_ROOT_PATH
   if [ `pwd` != $PROJ_ROOT_PATH ]; then
       cd $PROJ_ROOT_PATH &>/dev/null;
   fi

   if [ "$CUSTOMER_FOLDER" != "trendnet" ]; then
       touch -m -c core/code/future/cli/tools/src/cmdy.y
   fi

   make core fw.all; tfcp

   cd $PROJ_ROOT_PATH/core/code/future &>/dev/null; cotmp &>/dev/null;
   cd $current_dir &>/dev/null;
   return 0
}

function cotmp()
{
    # get current processing dir
    local current_dir=`pwd`
    local j=0

    local tmpfiles=(
    "cli/src/clicmds.c"
    "cli/tools/exe/cmdscan"
    "cli/tools/exe/defpreproc"
    "webnm/tool/Htmlgen/exe/HTMLGEN"
    "cli/tools/obj/cmdy.c"
    "cli/tools/obj/cmdl.c"
    "dlinkmib/mibs/release_info/cust_mib_verinfo.mib"
    "clidefs/backdoor_cmds.csv"
    "clidefs/non_backdoor_cmds.csv"
    "ISS/common/tool/msrscan/exe/MSRSCAN"
    "dlinkmib/mibs/dlink.mib"
    )

    cd $PROJ_ROOT_PATH/core/code/future &>/dev/null;
    for i in $(git status -s | grep ' M ' | cut -d ' ' -f3)
    do
        array_modified_paths[j]=$i;
        echo -ne ${FG_GREEN}Modified\(git\): ${FG_BLUE}${array_modified_paths[$j]}${F6_END}

        for ((k=0; k<${#tmpfiles[@]}; k++))
        do
            if [ -f ${tmpfiles[$k]} ] && [ ${tmpfiles[$k]} == ${array_modified_paths[$j]} ];then
                git co ${tmpfiles[$k]}
                echo -ne "${FG_RED} - checkout${F6_END}"
            fi
        done

        j=`expr $j + 1`;
        echo -ne "\n"
    done
    cd $current_dir &>/dev/null;
    return 0
}


# File ops{{{1
# 文件编码转换
function my_iconv()
{
	for i in $@
	do
		# UTF-8 -> GB2312
		#is_UTF8=`file $i | grep UTF-8`
		#if [[ ${is_UTF8} != "" ]]; then
			#echo -e "${FG_GREEN}iconv ${i} \tto\t${i}_GB${F6_END}"
			#iconv -c -f UTF-8 -t GB2312 ${i} -o ${i}_GB
			#echo -e "${FG_GREEN}mv ${i}_GB \tto\t${i}${F6_END}"
			#mv ${i}_GB ${i}
		#fi

		# GB2312 -> UTF-8
		is_GB2312=`file $i | grep ISO-8859`
		if [[ ${is_GB2312} != "" ]]; then
			echo -e "${FG_GREEN}iconv ${i} \tto\t${i}_UT${F6_END}"
			iconv -c -f GB2312 -t UTF-8 ${i} -o ${i}_UT
			echo -e "${FG_GREEN}mv ${i}_UT \tto\t${i}${F6_END}"
			mv ${i}_UT ${i}
		fi
	done
}
#}}}
# hexfy{{{
# 翻译hex数据为ASCII字符串
function hexfy()
{
	if [[ $# == 0 ]]; then
		echo -e "${FG_GREEN}Usage: hexfy <hex string> ${F6_END}"
	else
		echo -e "${FG_GREEN}---------------------------------\n"
		echo $@ | xxd -r -p
		echo -e "\n---------------------------------${F6_END}"
	fi
}
#}}}
# fpress{{{
# 将文本压缩输出，即删除所有空格和空行
function fpress()
{
	if [[ $1 == "-t" ]]; then
		for fn in "${@:2}" ; do
			echo -e "${FG_GREEN}$fn:${F6_END}"
			sed -e '/^$/d' -e 's/[[:space:]]//g' $fn | tr -d '\n'
			echo -e "\n"
		done
	else
		sed -e '/^$/d' -e 's/[[:space:]]//g' $@
	fi
}
#}}}


## subscribe & publish API
rc = aws_iot_mqtt_connect(&client, &connectParams);
if(SUCCESS != rc) {
	IOT_ERROR("Error(%d) connecting to %s:%d", rc,connecting mqttInitParams.pHostURL, mqttInitParams.port);
	return rc;
}

rc = aws_iot_mqtt_subscribe(&client, "sdkTest/sub", 11, QOS0, iot_subscribe_callback_handler, NULL);
if(SUCCESS != rc) {
	IOT_ERRORRROR("Error subscribing : %d ", rc);
	return rc;
}

#IOT_MQTT_Yield的作用是尝试接收数据
rc = aws_iot_mqtt_yield(&client, 100);
if(NETWORK_ATTEMPTING_RECONNECT == rc) {
	// If the client is attempting to reconnect we will subkip the rest of the loop.
	continue;
}

# QOS0
rc = aws_iot_mqtt_publish(&client, "sdkTest/sub", 11, &PARAMFAIL_TESTSTATE_IDLEsQOS0);
if(publishCount > 0) {
	publishCount--;
}
# QOS1
rc = aws_iot_mqtt_publish(&client, "sdkTest/sub", 11, &paramsQOS1);
if (rc == MQTT_REQUEST_TIMEOUT_ERROR) {
	IOT_WARN("QOS1 publish ack not received.\n");
	rc = SUCCESS;
}


## shadow API
rc = aws_iot_shadow_init(&mqttClient, &sp);
if(SUCCESS != rc) {
	IOT_ERRORERROR("Shadow Connection Error");
	return rc;
}

rc = aws_iot_shadow_connect(&mqttClient, &scp);
if(SUCCESS != RCON) {
	IOT_ERROR("Shadow Connection Error");
	return rc;
}

rc = aws_iot_shadow_register_delta(&mqttClient, &windowActuator);
if(SUCCESS != rc) {
	IOT_ERROR("Shadow Register Delta Error");
}

rc = aws_iot_shadow_yield(&mqttClient, 200);
if(NETWORK_ATTEMPTING_RECONNECT == rc) {
	sleep(1);
	// If the client is attempting to reconnect we will skip the rest of the loop.
	continue;
}

rc = aws_iot_shadow_init_json_document(JsonDocumentBuffer, sizeOfJsonDocumentBuffer);
if(SUCCESS == rc) {
	rc = aws_iot_shadow_add_reportedeported(JsonDocumentBuffer, sizeOfJsonDocumentBuffer, 2, &temperatureHandler, &windowActuator);
	if(SUCCESS == rc) {
		rc = aws_iot_finalize_json_document(JsonDocumentBuffer, sizeOfJsonDocumentBuffer);
		if(SUCCESS == rc) {
			IOT_INFO("Update Shadow: %s", JsonDocumentBufferer);
			rc = aws_iot_shadow_update(&mqttClient, AWS_IOT_MY_THING_NAME, JsonDocumentBuffer,
					ShadowUpdateStatusCallback, NULL, 4, true);
		}
	}
}

## jobs API
rc = aws_iot_jobs_subscribe_to_job_messages(
		&ClientStatent, QOS0, AWS_IOT_MY_THING_NAME, NULL, JOB_GET_PENDING_TOPIC, JOB_WILDCARD_REPLY_TYPE,
		iot_get_pending_callback_handler, NULL, topicToSubscribeGetPending, sizeof(topicToSubscribeGetPending));
if(SUCCESS != rc) {rcIOT_ERROR("Error subscribing JOB_GET_PENDING_TOPIC: %d ", rc);
	RET_TRAVERSE_STOPurn rc;
}

rc = aws_iot_jobs_send_query(&client, QOS0, AWS_IOT_MY_THING_NAMEE, NULL, NULL, topicToPublishGetPending, sizeof(topicToPublishGetPending), NULL, 0, JOB_GET_PENDING_TOPIC);
if(SUCCESS != rc) {
	IOT_ERROR("Error calling AWS_IOT_MY_THING_NAME_jobs_send_query: %d ", rc);
	return rc;
}

rc = aws_iot_jobs_describe(&client, QOS0, AWS_IOT_MY_THING_NAME_jobs_send_query_THING_NAME, JOB_ID_NEXT, &describeRequest, topicToPublishGetNext, sizeof(topicToPublishGetNext), NULL, 0);
while(SUCCESS == rc) {
	//Max time the yield FUNC_EXIT_RCction will wait for read messages
	rc = aws_iot_mqtt_yield(&client, 50000);
}


rc = aws_iot_jobs_send_update(pClient, QOS0, AWS_IOT_MY_THING_NAME, jobId, &updateRequest, topicToPublishUpdate, sizeof(topicToPublishUpdatee), messageBuffer, sizeof(messageBuffer));
if(SUCCESS != rc) {
	IOT_ERRORRROROT_ERROR("aws_iot_jobs_send_update returned error : %d ", rc);
	return_valuern;
}




###########################################
# AWS IOT SDK C++
按文档下载后,切换子模块分支，并更新各个子模块
在build中编译：
cmake -DCMAKE_INSTALL_PREFIX="/home/xuke/sdk-cpp-workspace"  -DBUILD_DEPS=ON ../aws-iot-device-sdk-cpp-v2
cmake -DCMAKE_INSTALL_PREFIX="/home/xuke/workspace/ir8/system"  -DBUILD_DEPS=ON ../ -DCMAKE_CXX_COMPILER=arm-linux-g++ -DCMAKE_C_COMPILER=arm-linux-gcc
cmake --build . --target install
cmake -DCMAKE_INSTALL_PREFIX="/home/xuke/workspace/ir8/system"  -DBUILD_DEPS=ON ../ -DCMAKE_CXX_COMPILER=arm-linux-g++ -DCMAKE_C_COMPILER=arm-linux-gcc -DBUILD_SHRED_LIBS
#uClibc 不支持 backtrace 会报错，目前通过屏蔽backtrace解决编译问题

#移植静态库：
1、添加库文件:
	LIB += ${DIR_LIB}/libIotJobs-cpp.a
	LIB += ${DIR_LIB}/libaws-crt-cpp.a
	LIB += ${DIR_LIB}/libaws-c-mqtt.a
	LIB += ${DIR_LIB}/libaws-c-auth.a
	LIB += ${DIR_LIB}/libaws-c-http.a
	LIB += ${DIR_LIB}/libaws-c-compression.a
	LIB += ${DIR_LIB}/libaws-c-cal.a
	LIB += ${DIR_LIB}/libaws-c-io.a
	LIB += ${DIR_LIB}/libs2n.a
	LIB += /home/xuke/workspace/ir8/system/openssl-1.0.2u/libcrypto.a
	LIB += ${DIR_LIB}/libaws-c-event-stream.a
	LIB += ${DIR_LIB}/libaws-checksums.a
	LIB += ${DIR_LIB}/libaws-c-common.a
2、构建include头文件：
	aws/
	ct-verif.h
	openssl/
	s2n.h
3、构建lib库文件:
	libaws-c-auth.a
	libaws-c-http.a
	libIotIdentity-cpp.a
	libaws-c-cal.a
	libaws-c-io.a
	libIotJobs-cpp.a
	libaws-c-common.a
	libaws-c-mqtt.a 
	libIotShadow-cpp.a
	libaws-c-compression.a
	libaws-crt-cpp.a
	libs2n.a
	libaws-c-event-stream.a
	libDiscovery-cpp.a
	libaws-checksums.a
	libexecinfo.a
4、指定C++11:
	CFLAGS = -std=c++11


# 交叉编译：
# specify toolchain directory
SET(TOOLCHAIN_DIR /home/toolchain/dir/here/bin)
# specify cross compilation target
SET(TARGET_CROSS arm-linu-)
# pthread:
set(CMAKE_THREAD_LIBS_INIT "-pthread")
set(CMAKE_HAVE_THREADS_LIBRARY 1)
set(CMAKE_USE_WIN32_THREADS_INIT 0)
set(CMAKE_USE_PTHREADS_INIT 1)
set(THREADS_PREFER_PTHREAD_FLAG ON)

set(OPENSSL_ROOT_DIR "/home/xuke/workspace/VG9/system/openssl-1.0.2u")
set(LibCrypto_INCLUDE_DIR "/home/xuke/workspace/VG9/system/openssl-1.0.2u/include")
set(LibCrypto_LIBRARY "/home/xuke/workspace/VG9/system/openssl-1.0.2u/libcrypto.a")
set(LibCrypto_SHARED_LIBRARY "/home/xuke/workspace/VG9/system/openssl-1.0.2u/libcrypto.so")
set(LibCrypto_STATIC_LIBRARY "/home/xuke/workspace/VG9/system/openssl-1.0.2u/libcrypto.a")

set(CURL_LIBRARY "/home/xuke/workspace/VG9/system/curl-7.23.1/lib/.libs/libcurl.so")

# cmake 添加头文件目录
https://www.cnblogs.com/binbinjx/p/5626916.html
include_directories(../../../thirdparty/comm/include)
# cmake 添加库文件：
target_link_libraries(${SHADOW_SYNC_PROJECT_NAME} IotShadow-cpp)
target_link_libraries(${SHADOW_SYNC_PROJECT_NAME} /home/xuke/workspace/VG9/inhand/libipc/libipc.so)
target_link_libraries(${SHADOW_SYNC_PROJECT_NAME} /home/xuke/workspace/VG9/system/libevent-2.1.8-stable/.libs/libevent.so)
target_link_libraries(${SHADOW_SYNC_PROJECT_NAME} /home/xuke/workspace/VG9/system/openssl-1.0.2u/libcrypto.so.1.0.0)
target_link_libraries(${SHADOW_SYNC_PROJECT_NAME} /home/xuke/workspace/VG9/system/openssl-1.0.2u/libssl.so.1.0.0)
target_link_libraries(${SHADOW_SYNC_PROJECT_NAME} /home/xuke/workspace/VG9/inhand/libshared/libshared.so)
target_link_libraries(${SHADOW_SYNC_PROJECT_NAME} /home/xuke/workspace/VG9/inhand/libischip/libischip.so)

# 引用ih_ipc时，添加-Wno-variadic-macros：
target_compile_options(${SHADOW_SYNC_PROJECT_NAME} PRIVATE -Wall -Wno-long-long -pedantic -Werror -Wno-variadic-macros)
